source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
dil_scheme
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
plate_map
View(plate_map)
# calculate required amount (volume)
plate_map <- plate_map %>% unite("solType", Drug, Concentration, Medium, remove=F)
solutionRequired <- select(plate_map, Drug, Concentration, Medium, solType) %>%
distinct() %>% unite("DrugType", Drug, Medium, sep="-", remove=F) %>%
mutate(nWell = sapply(solType, function(x){
subset(plate_map, solType==x) %>% nrow()}), Concentration = as.numeric(Concentration)) %>%
arrange(Drug, Concentration)
View(solutionRequired)
solutionRequired$Volume <- 1000 + # 1 mL excess
solutionRequired$nWell * as.numeric(run_info[1,2]) * as.numeric(run_info[2,2])
View(solutionRequired)
solutionRequired$nWell
run_info
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
dil_scheme
deck_map
stock_info
# assign final solution to a dilution tube
for(i in c(1:nrow(dil_scheme))){
tube_type <- if(dil_scheme$Volume[i] <= 13500){"15"}else{"50"}
# get empty slot
current_available <- subset(solution_map, grepl(tube_type, DeckID) & Fill=="")
# assign location
if(nrow(current_available)>0){
index_fill <- which(solution_map$Address==current_available$Address[1])
solution_map$Fill[index_fill] <- dil_scheme$solType[i]
}
}
# initiate empty solution map
solution_map <- lapply(c("Falcon15", "Falcon50", "Epp_1_5"),
function(x) createSolventMap(x, deck_map=deck_map)) %>%
list.rbind() %>% unite('Address', Deck, Slot, remove=F)
# assign medium location
mediums <- unique(dil_scheme$Medium)
for(i in c(1:length(mediums))){
# get empty slot
current_available <- subset(solution_map, grepl("Medium", DeckID) & Fill=="")
# assign location
if(nrow(current_available)>0){
index_fill <- which(solution_map$Address==current_available$Address[1])
solution_map$Fill[index_fill] <- mediums[i]
}
}
# initiate empty solution map
solution_map <- lapply(c("Falcon15", "Falcon50", "Epp_1_5"),
function(x) createSolventMap(x, deck_map=deck_map)) %>%
list.rbind() %>% unite('Address', Deck, Slot, remove=F)
# assign final solution to a dilution tube
for(i in c(1:nrow(dil_scheme))){
tube_type <- if(dil_scheme$Volume[i] <= 13500){"15"}else{"50"}
# get empty slot
current_available <- subset(solution_map, grepl(tube_type, DeckID) & Fill=="")
# assign location
if(nrow(current_available)>0){
index_fill <- which(solution_map$Address==current_available$Address[1])
solution_map$Fill[index_fill] <- dil_scheme$solType[i]
}
}
# assign medium location
mediums <- unique(dil_scheme$Medium)
for(i in c(1:length(mediums))){
# get empty slot
current_available <- subset(solution_map, grepl("Medium", DeckID) & Fill=="")
# assign location
if(nrow(current_available)>0){
index_fill <- which(solution_map$Address==current_available$Address[1])
solution_map$Fill[index_fill] <- mediums[i]
}
}
# assign stock location
for(i in c(1:nrow(stock_info))){
# get empty slot
current_available <- subset(solution_map, grepl("Epp", DeckID) & Fill=="")
# assign location
if(nrow(current_available)>0){
index_fill <- which(solution_map$Address==current_available$Address[1])
solution_map$Fill[index_fill] <- stock_info$'Drug Name'[i]
}
}
head(solution_map)
solution_map
View(solution_map)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
cmd_solventPreDistribution <- data.frame()
mediums <- unique(dil_scheme$Medium)
for(j in c(1:length(mediums))){
current_set <- subset(dil_scheme, Medium==mediums[j])
if(nrow(current_set)>0){
current_operation <- cmd_oneSolventDistribution(current_set, cmd_solventPreDistribution, solution_map)
cmd_solventPreDistribution <- rbind.data.frame(cmd_solventPreDistribution, current_operation)
}
}
colnames(cmd_solventPreDistribution) <- c("from_deck", "from_slot", "to_deck",
"to_slot", 'amt', "mix", 'tip_n',
'asp_set', 'pipette', 'comment')
head(cmd_solventPreDistribution)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
# commands: distributing solvent
current_tip_id <- if(nrow(last_cmd_list)==0){0}else{max(as.numeric(last_cmd_list[,7]))}
current_asp_id <- if(nrow(last_cmd_list)==0){0}else{max(as.numeric(last_cmd_list[,8]))}
current_pipette_type <- ''
i <- 1
from_deck <- solution_map$Deck[which(solution_map$Fill==current_set$Medium[i])]
from_slot <- solution_map$Slot[which(solution_map$Fill==current_set$Medium[i])]
to_deck <- solution_map$Deck[which(solution_map$Fill==current_set$solType[i])]
to_slot <- solution_map$Slot[which(solution_map$Fill==current_set$solType[i])]
to_deck
to_slot
# loop through
current_operation <- sapply(c(1:nrow(current_set)), function(i){
from_deck <- solution_map$Deck[which(solution_map$Fill==current_set$Medium[i])]
from_slot <- solution_map$Slot[which(solution_map$Fill==current_set$Medium[i])]
to_deck <- solution_map$Deck[which(solution_map$Fill==current_set$solType[i])]
to_slot <- solution_map$Slot[which(solution_map$Fill==current_set$solType[i])]
amt <- current_set$V_medium[i]
pipette_type <- if(amt < 200){'p300'}else{'p1000'}
if(pipette_type != current_pipette_type){current_tip_id <- current_tip_id + 1}
return(c(from_deck, from_slot, to_deck, to_slot, amt, 0,
current_tip_id, current_asp_id+i,
pipette_type, "initial solvent distribution"))
}) %>% t() %>% data.frame()
current_operatio
current_operation
to_deck
current_operation <- sapply(c(1:nrow(current_set)), function(i){
from_deck <- solution_map$Deck[which(solution_map$Fill==current_set$Medium[i])]
from_slot <- solution_map$Slot[which(solution_map$Fill==current_set$Medium[i])]
to_deck <- solution_map$Deck[which(solution_map$Fill==current_set$solType[i])]
to_slot <- solution_map$Slot[which(solution_map$Fill==current_set$solType[i])]
amt <- current_set$V_medium[i]
pipette_type <- if(amt < 200){'p300'}else{'p1000'}
if(pipette_type != current_pipette_type){current_tip_id <- current_tip_id + 1}
return(c(from_deck, from_slot, to_deck, to_slot, amt, 0,
current_tip_id, current_asp_id+i,
pipette_type, "initial solvent distribution"))
})
current_operation %>% View()
i <- 1
from_deck <- solution_map$Deck[which(solution_map$Fill==current_set$Medium[i])]
from_slot <- solution_map$Slot[which(solution_map$Fill==current_set$Medium[i])]
to_deck <- solution_map$Deck[which(solution_map$Fill==current_set$solType[i])]
to_slot <- solution_map$Slot[which(solution_map$Fill==current_set$solType[i])]
amt <- current_set$V_medium[i]
pipette_type <- if(amt < 200){'p300'}else{'p1000'}
if(pipette_type != current_pipette_type){current_tip_id <- current_tip_id + 1}
c(from_deck, from_slot, to_deck, to_slot, amt, 0,
current_tip_id, current_asp_id+i,
pipette_type, "initial solvent distribution")
to_deck
to_slot
from_deck
solution_map
which(solution_map$Fill==current_set$Medium[i])
current_set$Medium
solution_map$Fill
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
dil_scheme
# initiate empty solution map
solution_map <- lapply(c("Falcon15", "Falcon50", "Epp_1_5"),
function(x) createSolventMap(x, deck_map=deck_map)) %>%
list.rbind() %>% unite('Address', Deck, Slot, remove=F)
# assign final solution to a dilution tube
for(i in c(1:nrow(dil_scheme))){
tube_type <- if(dil_scheme$Volume[i] <= 13500){"15"}else{"50"}
# get empty slot
current_available <- subset(solution_map, grepl(tube_type, DeckID) & Fill=="")
# assign location
if(nrow(current_available)>0){
index_fill <- which(solution_map$Address==current_available$Address[1])
solution_map$Fill[index_fill] <- dil_scheme$solType[i]
}
}
# assign medium location
mediums <- unique(dil_scheme$Medium)
mediums
i <- 1
# get empty slot
current_available <- subset(solution_map, grepl("Medium", DeckID) & Fill=="")
current_available
head(solutionMap)
head(solution_map)
View(solution_map)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
# initiate empty solution map
solution_map <- lapply(c("Falcon15", "Falcon50", "Epp_1_5"),
function(x) createSolventMap(x, deck_map=deck_map)) %>%
list.rbind() %>% unite('Address', Deck, Slot, remove=F)
i <- 1
dil_scheme[1]
View(dil_scheme)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
# calculate required amount (volume)
plate_map <- plate_map %>% unite("solType", Drug, Concentration, Medium, remove=F)
solutionRequired <- select(plate_map, Drug, Concentration, Medium, solType) %>%
distinct() %>% unite("DrugType", Drug, Medium, sep="-", remove=F) %>%
mutate(nWell = sapply(solType, function(x){
subset(plate_map, solType==x) %>% nrow()}), Concentration = as.numeric(Concentration)) %>%
arrange(Drug, Concentration)
solutionRequired
View(solutionRequired)
as.numeric(run_info[1,2])
as.numeric(run_info[2,2])
solutionRequired$nWell
solutionRequired$Volume <- 1000 + # 1 mL excess
solutionRequired$nWell * as.numeric(run_info[1,2]) * as.numeric(run_info[2,2])
View(solutionRequired)
solutionRequired$V_fromAbove <- 0
solutionRequired$V_forBelow <- 0
solutionRequired$V_medium <- 0
# calculate per-drug type
drug_types <- unique(solutionRequired$DrugType)
# main dilution scheme
dil_scheme <- lapply(drug_types, calculate_dilutionSet,
solution_required = solutionRequired, stock_info=stock_information) %>%
list.rbind()
View(dil_scheme)
run_info
deck_map
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
# initiate empty solution map
solution_map <- lapply(c("Falcon15", "Falcon50", "Epp_1_5"),
function(x) createSolventMap(x, deck_map=deck_map)) %>%
list.rbind() %>% unite('Address', Deck, Slot, remove=F)
solution_map
# assign final solution to a dilution tube
for(i in c(1:nrow(dil_scheme))){
tube_type <- if(dil_scheme$Volume[i] <= 13500){"15"}else{"50"}
# get empty slot
current_available <- subset(solution_map, grepl(tube_type, DeckID) & Fill=="")
# assign location
if(nrow(current_available)>0){
index_fill <- which(solution_map$Address==current_available$Address[1])
solution_map$Fill[index_fill] <- dil_scheme$solType[i]
}
}
View(solution_map)
source("~/GitHub/ot2/Plate48/48WellParse.R", echo=TRUE)
