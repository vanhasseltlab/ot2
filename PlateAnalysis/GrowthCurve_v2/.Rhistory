})
stk_drugConcentrations <- data.frame(id = c(1:8),
C = 0.25 * c(0.25, 0.5, 1, 1.5, 2, 4, 16, 64)) # mg/L vancomycin used in experiment
stk_eventMatrix <- eventTable() %>% # initiate event matrix
add.sampling(0:24) %>%  # add observation every 1 hours for 24 hours
dplyr::select(-id) %>%  # remove id values to follow ids from 'stk_drugConcentrations'
expand_grid(C=stk_drugConcentrations$C) %>% # expand data table for all drug concentrations
left_join(stk_drugConcentrations, by="C") %>% # bind back IDs
arrange(time) %>% arrange(id) # arrange by time and id (id = higher level sorting)
# Running the simulation
pdSimulation_result <- pdModel$solve(pdParameters, stk_eventMatrix, initialState) %>%
data.frame()
# Plotting the simulation result
pd_stkPlot <- ggplot(pdSimulation_result, aes(x=time, y=N, group=id))+
geom_line(aes(col=factor(C, levels=sort(unique(C)))), linewidth=1.2)+
theme_bw()+xlab("Time (hours)")+ylab("Cell Density (CFU/mL)")+
guides(col=guide_legend(title='[Vancomycin] (mg/L)'))+
scale_y_continuous(trans='log10')+ # convert to log10-scale on plot
scale_color_manual(values=c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"))+ # colorblind-friendly palette!
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14, face='bold'),
legend.text=element_text(size=12),
legend.title=element_text(size=12, face='bold'),
legend.position='bottom')
pd_stkPlot
# PK Parameters #
# Fixed effect parameters
pkPars <- c(
tCL_low_clcr_slope = 0.0322, # (L/h) / (mL-CLCR/min)
tCL_low_clcr_intercept = 0.32, # (L/h)
tCL_high_clcr = 0.383, # (L/h) / (mL-CLCR/min)
tV1_infected_wtFactor = 0.478, # L/kg-bodyweight
tV2_infected = 60.6, # L
tQ = 8.81, # L/h
tfPartition = 0.17 # lung partition coefficient for vancomycin. For bloodstream infection, value is 1.
) %>%  log() # we convert it to log-scale to standardize to the first tutorial!
# Random effect parameters
pkPars_iiv <- matrix(0, nrow=4, ncol=4)
diag(pkPars_iiv) <- c(ETA_CL = IIVtoETA(0.375),
ETA_V1 = IIVtoETA(0.182),
ETA_Q = IIVtoETA(0.192),
ETA_V2 = IIVtoETA(0.728))
rownames(pkPars_iiv) <- c("ETA_CL", "ETA_V1", "ETA_Q", "ETA_V2")
colnames(pkPars_iiv) <- c("ETA_CL", "ETA_V1", "ETA_Q", "ETA_V2")
# Model Object
pkModel_vancomycin <- rxode2({
# PK: Individual parameter pre-calculation #
# Clearance; creatinine clearance-dependent
if(CLcr >= 85){
CL = exp(tCL_high_clcr+ETA_CL);
}else{
CL = (exp(tCL_low_clcr_slope) * CLcr + exp(tCL_low_clcr_intercept)) * exp(ETA_CL);
}
V1 = exp(tV1_infected_wtFactor + ETA_V1) * WT;
V2 = exp(tV2_infected + ETA_V2);
Q = exp(tQ + ETA_Q);
fPartition = exp(tfPartition);
# PK parameter standardization
k_el = CL/V1;
k12= Q/V1;
k21 = Q/V2;
# Calculating drug concentration at different compartments
C1 = m1/V1
C2 = m2/V2;
C_lungs = C1*fPartition # lung concentration as a fraction of plasma (first-compartment) concentration
# PK Mass Balances#
d/dt(m1) = -k_el * V1 * C1 - k12 * C1 * V1 + k21 * V1 * C2;
d/dt(m2) = k12 * V2 * C1 - k21 * C2 * V2;
})
# Prepare event matrix
samplePK_eventMatrix <- eventTable() %>% # initiate event matrix
# add dosing: 1 h infusion
add.dosing(dose            = 1000,     # total Dose in mg.
nbr.doses       = 5,      # the number of doses you want to simulate for
dosing.interval = 24,      # frequency of dosing q12h
dur = 1.0, dosing.to=1) %>%
add.sampling(0:120) %>%         # Sampling will be simulated every hour for 5 days
mutate(WT = 52.6,                # kg; median bodyweight of the infected population
CLcr = 79.6)               # mL/min; creatinine clearance
# run simulation
simRes_vancomycinPK <- pkModel_vancomycin$solve(pkPars, samplePK_eventMatrix,
omega=pkPars_iiv, nSub=1000)
# summarize results
simRes_vancomycinPK <- data.frame(simRes_vancomycinPK) %>%
group_by(time) %>%
summarize(C_central_50= median(C1),                  # median concentration at central compartment
C_central_5= quantile(C1, 0.025),        # PK 2.5th  percentile
C_central_975= quantile(C1, 0.975),        # PK 97.5th percentile
C_lung_50 = median(C_lungs),        # median concentration at lung (by partition coefficient)
C_lung_5= quantile(C_lungs, 0.025),         # PK 2.5th percentile
C_lung_975 = quantile(C_lungs, 0.975)) %>%     # PK 97.5th percentile
melt(id.vars='time')
# get condition summary matrix
condition_matrix <- sapply(unique(simRes_vancomycinPK$variable), function(x) strsplit(toString(x), split="_")[[1]][2:3]) %>% t() %>% data.frame() %>% rename("compartment"=1, 'quantile'=2) %>%
mutate(variable=unique(simRes_vancomycinPK$variable),
quantile = sapply(quantile, function(x) paste0("Q_", x)))
# summarize details from simulation result
simRes_vancomycinPK <- left_join(simRes_vancomycinPK, condition_matrix, by='variable') %>%
dcast(compartment+time~quantile, value.var='value')
# plotting
pltPK <- ggplot(simRes_vancomycinPK, aes(x=time, y=Q_50))+
geom_ribbon(aes(x=time, ymin=Q_5, ymax=Q_975), fill='lightblue', alpha=0.4)+
geom_line(size=1.2)+theme_bw()+facet_wrap(~compartment, ncol=2)+
scale_y_continuous(trans='log10')+
scale_x_continuous(breaks=seq(0, max(simRes_vancomycinPK$time), 24))+
xlab("Time (hours)")+ylab("[Vancomycin] (mg/L)")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14, face='bold'),
strip.text=element_text(size=13, face='bold'))
pltPK
# Model Object
pkpdModel_vancomycin <- rxode2({
# PK part starts here #
# PK: Individual parameter pre-calculation #
# Clearance; creatinine clearance-dependent
if(CLcr >= 85){
CL = exp(tCL_high_clcr+ETA_CL);
}else{
CL = (exp(tCL_low_clcr_slope) * CLcr + exp(tCL_low_clcr_intercept)) * exp(ETA_CL);
}
V1 = exp(tV1_infected_wtFactor + ETA_V1) * WT;
V2 = exp(tV2_infected + ETA_V2);
Q = exp(tQ + ETA_Q);
fPartition = exp(tfPartition);
# PK parameter standardization
k_el = CL/V1;
k12= Q/V1;
k21 = Q/V2;
# Calculating drug concentration at different compartments
C1 = m1/V1
C2 = m2/V2;
C_lungs = C1*fPartition # lung concentration as a fraction of plasma (first-compartment) concentration
# PK Mass Balances#
d/dt(m1) = -k_el * V1 * C1 - k12 * C1 * V1 + k21 * V1 * C2;
d/dt(m2) = k12 * V2 * C1 - k21 * C2 * V2;
# PK is done here #
# PD part starts here #
# PD parameter pre-calculation #
k_growth = exp(tk_growth)
k_death = exp(tk_death)
Nmax = exp(tNmax)
Emax = exp(tEmax)
EC50 = exp(tEC50)
hill = exp(thill)
# Calculate drug effect (kill effect)
k_drug = Emax * (C_lungs^hill) / ((C_lungs^hill) + (EC50^hill)) # THIS PART WAS MODIFIED !
# PD mass balance #
d/dt(N) = ((k_growth - k_death) * (1 - N/Nmax) - k_drug) * N # simplified version of the same mass balance equation
# PD is done here #
})
# run simulation
simRes_vancomycinPKPD <- pkpdModel_vancomycin$solve(c(pkPars, pdParameters), # combine PK and PD parameters
samplePK_eventMatrix, # event for 1000 mg daily dosing
omega=pkPars_iiv, nSub=1000)
# summarize results
simRes_vancomycinPKPD <- data.frame(simRes_vancomycinPKPD) %>%
group_by(time) %>%
summarize(C_50 = median(C_lungs),        # median concentration at lung (by partition coefficient)
C_5= quantile(C_lungs, 0.025),         # PK 2.5th percentile
C_975 = quantile(C_lungs, 0.975), # PK 97.5th percentile
N_50 = median(N),        # median bacterial cell density
N_5= quantile(N, 0.025),         # PD 2.5th percentile
N_975 = quantile(N, 0.975))    # PD 97.5th percentile
# plotting
pltPK_pkpd <- ggplot(simRes_vancomycinPKPD, aes(x=time, y=C_50))+
geom_ribbon(aes(x=time, ymin=C_5, ymax=C_975), fill='lightblue', alpha=0.4)+
geom_line(linewidth=1.2)+theme_bw()+
scale_y_continuous(trans='log10')+
scale_x_continuous(breaks=seq(0, max(simRes_vancomycinPKPD$time), 24))+
xlab("Time (hours)")+ylab("[Vancomycin] (mg/L)")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14, face='bold'),
strip.text=element_text(size=13, face='bold'))
pltPD_pkpd <- ggplot(simRes_vancomycinPKPD, aes(x=time, y=N_50))+
geom_ribbon(aes(x=time, ymin=N_5, ymax=N_975), fill='lightblue', alpha=0.4)+
geom_line(linewidth=1.2)+theme_bw()+
scale_y_continuous(trans='log10')+
scale_x_continuous(breaks=seq(0, max(simRes_vancomycinPKPD$time), 24))+
xlab("Time (hours)")+ylab("Cell Density (CFU/mL)")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14, face='bold'),
strip.text=element_text(size=13, face='bold'))
plot_grid(pltPK_pkpd, pltPD_pkpd, ncol=1, align='v')
head(simRes_vancomycinPKPD)
# run simulation
simRes_vancomycinPKPD <- pkpdModel_vancomycin$solve(c(pkPars, pdParameters), # combine PK and PD parameters
samplePK_eventMatrix, # event for 1000 mg daily dosing
c(m1=0, m2=0, N=10^6), # combined initial states for PK and PD
omega=pkPars_iiv, nSub=1000)
# summarize results
simRes_vancomycinPKPD <- data.frame(simRes_vancomycinPKPD) %>%
group_by(time) %>%
summarize(C_50 = median(C_lungs),        # median concentration at lung (by partition coefficient)
C_5= quantile(C_lungs, 0.025),         # PK 2.5th percentile
C_975 = quantile(C_lungs, 0.975), # PK 97.5th percentile
N_50 = median(N),        # median bacterial cell density
N_5= quantile(N, 0.025),         # PD 2.5th percentile
N_975 = quantile(N, 0.975))    # PD 97.5th percentile
# plotting
pltPK_pkpd <- ggplot(simRes_vancomycinPKPD, aes(x=time, y=C_50))+
geom_ribbon(aes(x=time, ymin=C_5, ymax=C_975), fill='lightblue', alpha=0.4)+
geom_line(linewidth=1.2)+theme_bw()+
scale_y_continuous(trans='log10')+
scale_x_continuous(breaks=seq(0, max(simRes_vancomycinPKPD$time), 24))+
xlab("Time (hours)")+ylab("[Vancomycin] (mg/L)")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14, face='bold'),
strip.text=element_text(size=13, face='bold'))
pltPD_pkpd <- ggplot(simRes_vancomycinPKPD, aes(x=time, y=N_50))+
geom_ribbon(aes(x=time, ymin=N_5, ymax=N_975), fill='lightblue', alpha=0.4)+
geom_line(linewidth=1.2)+theme_bw()+
scale_y_continuous(trans='log10')+
scale_x_continuous(breaks=seq(0, max(simRes_vancomycinPKPD$time), 24))+
xlab("Time (hours)")+ylab("Cell Density (CFU/mL)")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14, face='bold'),
strip.text=element_text(size=13, face='bold'))
plot_grid(pltPK_pkpd, pltPD_pkpd, ncol=1, align='v')
head(simRes_vancomycinPKPD)
# prepare event matrix for 500 mg q12h dosing
otherVancomycinDose_eventMatrix <- eventTable() %>% # initiate event matrix
add.dosing(dose            = 50,     # total Dose in mg.
nbr.doses       = 10,      # the number of doses you want to simulate for
dosing.interval = 12,      # frequency of dosing q12h
dur = 0.5,               # standard infusion duration is 30 mins for this dose!
dosing.to=1) %>%
add.sampling(0:120) %>%          # Sampling will be simulated every hour for 5 days
mutate(WT = 52.6,                # kg; median bodyweight of the infected population
CLcr = 79.6)              # mL/min; creatinine clearance
# run simulation
simRes_vancomycinPKPD <- pkpdModel_vancomycin$solve(c(pkPars, pdParameters), # combine PK and PD parameters
otherVancomycinDose_eventMatrix, # event table for 500 mg q12h dosing
c(m1=0, m2=0, N=10^6), # combined initial states for PK and PD
omega=pkPars_iiv, nSub=1000)
# summarize results
simRes_vancomycinPKPD <- data.frame(simRes_vancomycinPKPD) %>%
group_by(time) %>%
summarize(C_50 = median(C_lungs),        # median concentration at lung (by partition coefficient)
C_5= quantile(C_lungs, 0.025),         # PK 2.5th percentile
C_975 = quantile(C_lungs, 0.975), # PK 97.5th percentile
N_50 = median(N),        # median bacterial cell density
N_5= quantile(N, 0.025),         # PD 2.5th percentile
N_975 = quantile(N, 0.975))    # PD 97.5th percentile
# plotting
pltPK_pkpd <- ggplot(simRes_vancomycinPKPD, aes(x=time, y=C_50))+
geom_ribbon(aes(x=time, ymin=C_5, ymax=C_975), fill='lightblue', alpha=0.4)+
geom_line(linewidth=1.2)+theme_bw()+
scale_y_continuous(trans='log10')+
scale_x_continuous(breaks=seq(0, max(simRes_vancomycinPKPD$time), 24))+
xlab("Time (hours)")+ylab("[Vancomycin] (mg/L)")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14, face='bold'),
strip.text=element_text(size=13, face='bold'))
pltPD_pkpd <- ggplot(simRes_vancomycinPKPD, aes(x=time, y=N_50))+
geom_ribbon(aes(x=time, ymin=N_5, ymax=N_975), fill='lightblue', alpha=0.4)+
geom_line(linewidth=1.2)+theme_bw()+
scale_y_continuous(trans='log10')+
scale_x_continuous(breaks=seq(0, max(simRes_vancomycinPKPD$time), 24))+
xlab("Time (hours)")+ylab("Cell Density (CFU/mL)")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14, face='bold'),
strip.text=element_text(size=13, face='bold'))
plot_grid(pltPK_pkpd, pltPD_pkpd, ncol=1, align='v')
# prepare event matrix for 500 mg q12h dosing
otherVancomycinDose_eventMatrix <- eventTable() %>% # initiate event matrix
add.dosing(dose            = 250,     # total Dose in mg.
nbr.doses       = 10,      # the number of doses you want to simulate for
dosing.interval = 12,      # frequency of dosing q12h
dur = 0.5,               # standard infusion duration is 30 mins for this dose!
dosing.to=1) %>%
add.sampling(0:120) %>%          # Sampling will be simulated every hour for 5 days
mutate(WT = 52.6,                # kg; median bodyweight of the infected population
CLcr = 79.6)              # mL/min; creatinine clearance
# run simulation
simRes_vancomycinPKPD <- pkpdModel_vancomycin$solve(c(pkPars, pdParameters), # combine PK and PD parameters
otherVancomycinDose_eventMatrix, # event table for 500 mg q12h dosing
c(m1=0, m2=0, N=10^6), # combined initial states for PK and PD
omega=pkPars_iiv, nSub=1000)
# summarize results
simRes_vancomycinPKPD <- data.frame(simRes_vancomycinPKPD) %>%
group_by(time) %>%
summarize(C_50 = median(C_lungs),        # median concentration at lung (by partition coefficient)
C_5= quantile(C_lungs, 0.025),         # PK 2.5th percentile
C_975 = quantile(C_lungs, 0.975), # PK 97.5th percentile
N_50 = median(N),        # median bacterial cell density
N_5= quantile(N, 0.025),         # PD 2.5th percentile
N_975 = quantile(N, 0.975))    # PD 97.5th percentile
pltPD_pkpd <- ggplot(simRes_vancomycinPKPD, aes(x=time, y=N_50))+
geom_ribbon(aes(x=time, ymin=N_5, ymax=N_975), fill='lightblue', alpha=0.4)+
geom_line(linewidth=1.2)+theme_bw()+
scale_y_continuous(trans='log10')+
scale_x_continuous(breaks=seq(0, max(simRes_vancomycinPKPD$time), 24))+
xlab("Time (hours)")+ylab("Cell Density (CFU/mL)")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14, face='bold'),
strip.text=element_text(size=13, face='bold'))
plot_grid(pltPK_pkpd, pltPD_pkpd, ncol=1, align='v')
source("C:/Users/sebas/Desktop/BOOExpData/expCopy.R", echo=TRUE)
View(fileList)
source("C:/Users/sebas/Desktop/BOOExpData/expCopy.R", echo=TRUE)
View(fileList)
source("C:/Users/sebas/Desktop/BOOExpData/expCopy.R", echo=TRUE)
source("C:/Users/sebas/Desktop/BOOExpData/expCopy.R", echo=TRUE)
source("C:/Users/sebas/Desktop/BOOExpData/expCopy.R", echo=TRUE)
current_exp
unique(fileList$expName)
head(fileList)
source("C:/Users/sebas/Desktop/BOOExpData/expCopy.R", echo=TRUE)
unique(fileList$expName)
current_exp
# subset relevant files
current_files <- subset(fileList, expName==current_exp)
current_files
!(target_user %in% list.files(outputwd))
# grab target username and experiment name
target_user <- current_files$name[1]
target_user
!(target_user %in% list.files(outputwd))
!(current_exp %in% list.files(paste0(outputwd, target_user)))
current_files$filename
# copy files
null_callback <- sapply(current_files$filename, function(x){
file.copy(from=paste0(mainwd, x),
to=paste0(outputwd, target_user, "/", current_exp, "/", x))
})
target_user
paste0(outputwd, target_user, "/", current_exp, "/", x)
x <- current_files$filename[1]
paste0(outputwd, target_user, "/", current_exp, "/", x)
file.copy(from=paste0(mainwd, x),
to=paste0(outputwd, target_user, "/", current_exp, "/", 'asd.csv'))
paste0(mainwd, x)
file.copy(from=paste0(mainwd, x),
to=paste0(outputwd, target_user, "/", current_exp, "/", x))
?file.copy
file.copy(from=paste0(mainwd, x),
to=paste0(outputwd, target_user, "/", current_exp, "/", x), recursive=T)
source("C:/Users/sebas/Desktop/BOOExpData/expCopy.R", echo=TRUE)
fileList
current_exp
# subset relevant files
current_files <- subset(fileList, expName==current_exp)
# grab target username and experiment name
target_user <- current_files$name[1]
# check user directory create
if(!(target_user %in% list.files(outputwd))){
dir.create(paste0(outputwd, target_user))
}
# check project directory create
if(!(current_exp %in% list.files(paste0(outputwd, target_user)))){
dir.create(paste0(outputwd, target_user, "/", current_exp))
}
# copy files
null_callback <- sapply(current_files$filename, function(x){
file.copy(from=paste0(mainwd, x),
to=paste0(outputwd, target_user, "/", current_exp, "/", x))
})
x <- current_files$filename[1]
x
file.copy(from=paste0(mainwd, x),
to=paste0(outputwd, target_user, "/", current_exp, "/", x))
file.copy(from=paste0(mainwd, x),
to=paste0(outputwd, target_user, "/", current_exp, "/", x))
target_user
current_exp
shiny::runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
runApp('GitHub/XBoT/mainPage')
library(shiny); runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
runApp('GitHub/hiAL/hiAL_interface/interfaceCombined.R')
source("C:/Users/sebas/Desktop/BOOExpData/expCopy.R", echo=TRUE)
unique(fileList$expName)
source("C:/Users/sebas/Desktop/BOOExpData/expCopy.R", echo=TRUE)
unique(fileList$expName)
shiny::runApp('GitHub/XBoT/mainPage')
asd <- c("dplyr", "chron",
"reshape2","ggplot2")
source("~/GitHub/ot2/PlateAnalysis/GrowthCurve/srcPlateAnalyzer.R", echo=TRUE)
source("~/GitHub/ot2/PlateAnalysis/GrowthCurve/srcPlateAnalyzer.R", echo=TRUE)
source("~/GitHub/ot2/PlateAnalysis/GrowthCurve/srcPlateAnalyzer.R", echo=TRUE)
#EXTRACTION---------------------------
#read platemap and measurement results
plateMap <- ReadPlateMap(platemap_address)
measResults <- Read_allMeasFile(inputwd)
#combine raw data
rawData_matrix <- left_join(plateMap, measResults, by="Slot")
rawData_NM <- Create_LongFormat(rawData_matrix) #create long-format
#REPEAT EXTRACTION FOR CONTROL PLATE (if prompted)------------------------
controlData_NM <- NULL
if(!is.null(control_map_address) & !is.null(control_meas_wd) & separate_control){
#read platemap and measurement results
control_Map <- ReadPlateMap(control_map_address)
control_Res <- Read_allMeasFile(control_meas_wd)
#combine raw controls
controlData_matrix <- left_join(control_Map, control_Res, by="Slot")
controlData_NM <- Create_LongFormat(controlData_matrix) #create long-format
}else if(!separate_control & !is.null(control_map_address) & control_selection==5){
#IF control selection == 5 (coordinate controls)
#Read plate map
controlData_NM <- read.csv(control_map_address, header=T)[,2:13] %>% t() %>% unlist() %>% as.vector()
controlData_NM <- cbind.data.frame(as.vector(sapply(LETTERS[1:8], function(x) paste(x, c(1:12), sep=""))),
controlData_NM)
colnames(controlData_NM) <- c("Slot", "ControlType")
}else if(separate_control){
errMessage <- "Control data missing!"
control_selection <- 1
}
control_map_address <- NULL
if(!is.null(control_map_address) & !is.null(control_meas_wd) & separate_control){
#read platemap and measurement results
control_Map <- ReadPlateMap(control_map_address)
control_Res <- Read_allMeasFile(control_meas_wd)
#combine raw controls
controlData_matrix <- left_join(control_Map, control_Res, by="Slot")
controlData_NM <- Create_LongFormat(controlData_matrix) #create long-format
}else if(!separate_control & !is.null(control_map_address) & control_selection==5){
#IF control selection == 5 (coordinate controls)
#Read plate map
controlData_NM <- read.csv(control_map_address, header=T)[,2:13] %>% t() %>% unlist() %>% as.vector()
controlData_NM <- cbind.data.frame(as.vector(sapply(LETTERS[1:8], function(x) paste(x, c(1:12), sep=""))),
controlData_NM)
colnames(controlData_NM) <- c("Slot", "ControlType")
}else if(separate_control){
errMessage <- "Control data missing!"
control_selection <- 1
}
control_meas_wd <- NULL
separate_control <- F
if(!is.null(control_map_address) & !is.null(control_meas_wd) & separate_control){
#read platemap and measurement results
control_Map <- ReadPlateMap(control_map_address)
control_Res <- Read_allMeasFile(control_meas_wd)
#combine raw controls
controlData_matrix <- left_join(control_Map, control_Res, by="Slot")
controlData_NM <- Create_LongFormat(controlData_matrix) #create long-format
}else if(!separate_control & !is.null(control_map_address) & control_selection==5){
#IF control selection == 5 (coordinate controls)
#Read plate map
controlData_NM <- read.csv(control_map_address, header=T)[,2:13] %>% t() %>% unlist() %>% as.vector()
controlData_NM <- cbind.data.frame(as.vector(sapply(LETTERS[1:8], function(x) paste(x, c(1:12), sep=""))),
controlData_NM)
colnames(controlData_NM) <- c("Slot", "ControlType")
}else if(separate_control){
errMessage <- "Control data missing!"
control_selection <- 1
}
#PROCESSING-----------------------
# Normalize to control
prc_NM <- normalize_to_Control(rawData_NM, controlData_NM, separate_control, control_selection)
head(rawData_NM)
head(controlData_NM)
separate_control
head(control_selection)
source("~/GitHub/ot2/PlateAnalysis/GrowthCurve/srcPlateAnalyzer.R", echo=TRUE)
# STEP 0 - Expand WellID
raw_data <- cbind.data.frame(raw_data, do.call(rbind, strsplit(raw_data$WellId, split="-")))
colnames(raw_data)[5:8] <- c("Drug", "DrugConc", "Medium", "Strain")
control_selection==5
!is.null(ctrl_data)
control_selection!=0
control_selection
source("~/GitHub/ot2/PlateAnalysis/GrowthCurve/srcPlateAnalyzer.R", echo=TRUE)
View(dis)
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
head(dis)
source("~/GitHub/ot2/PlateAnalysis/GrowthCurve_v2/srcPlateAnalyzer.R", echo=TRUE)
head(meas_data)
source("~/GitHub/ot2/PlateAnalysis/GrowthCurve_v2/srcPlateAnalyzer.R", echo=TRUE)
# draw plot
plt <- ggplot(meas_data, aes(x=time, y=raw_measurement))+
geom_point(shape=1)+theme_bw()+facet_wrap(~drug_concentration)
plt
unique(meas_data$drug_name)
View(meas_data)
source("~/GitHub/ot2/PlateAnalysis/GrowthCurve_v2/srcPlateAnalyzer.R", echo=TRUE)
plt
source("~/GitHub/ot2/PlateAnalysis/GrowthCurve_v2/srcPlateAnalyzer.R", echo=TRUE)
plt
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
runApp('GitHub/ot2/PlateAnalysis/GrowthCurve_v2')
